#****************************************************************************
#**                Lockheed Martin Proprietary Information                 **
#**                     Export Controlled Information                      **
#****************************************************************************
#**               Copyright 2023 Lockheed Martin Corporation               **
#**                                                                        **
#**                LOCKHEED MARTIN PROPRIETARY INFORMATION                 **
#** This document contains Lockheed Martin Proprietary Information and     **
#** trade secrets and/or commercial or financial information that is       **
#** privileged or confidential and is therefore exempt from disclosure     **
#** under the Freedom of Information Act (5 U.S.C. § 552(b)(4)). Public    **
#** disclosure of any information marked Lockheed Martin Proprietary       **
#** Information is prohibited by the Trade Secrets Act (18 U.S.C. § 1905   **
#** and the Economic Espionage Act of 1996 (18 U.S.C. § 1831 – 1839).      **
#** Lockheed Martin Proprietary Information is not to be made available to **
#** others without the prior written permission of Lockheed Martin         **
#** Corporation.                                                           **
#**                                                                        **
#**                 EXPORT CONTROLLED INFORMATION WARNING                  **
#** This document contains technical data whose export is restricted by    **
#** the Arms Export Control Act (22 U. S.C. §§ 2751-2799aa), the Export    **
#** Controls Act of 2018 (50 U.S.C. §§ 4811-4826), the International       **
#** Traffic in Arms Regulations (22 C.F.R. Parts 120-130), and the Export  **
#** Administration Regulations (15 C.F.R. Parts 730-774). Violations of    **
#** these export laws and regulations are subject to severe criminal       **
#** penalties.                                                             **
#****************************************************************************
#** CSCI/Domain: Core-Services                                             **
#****************************************************************************
#** Filename: ODIN_ASIoF_API_Send.yml                                      **
#****************************************************************************
openapi: "3.0.2"
info:
  title: F-35 Enterprise Messages ODIN-ASIOF API - Send
  description: "Gateway Service API - Send Message and SplitFile"
  version: "1.0.0"
servers:
  - url: http://{systemIpAddress}:{port}/odin-asiof-api-send/v1
paths:
  #
  # Endpoint for posting messages
  #
  /messages/{destSystem}/{messageName}:
    post:
      summary: to send a message and its attachments a single zip file to F-35 Enterprise system or ODIN
      responses:
        '200':
          description: OK
        '202':
          description: Accepted
        '400':
          description: Bad request
        '408':
          description: Request Timeout
        '413':
          description: Payload Too Large
      parameters:
      - in: path
        name: destSystem
        required: true
        schema:
          type: string
          description: the system that accepts the message
          example:
          - LDM
          - SPMS
          - GSSM
          - PW
          - ODIN-SDD
          - ODIN-LRIP
          - IFRACAS
      - in: path
        name: messageName
        required: true
        schema:
          type: string 
          example:
           - WholesaleASN2
           - requestExternalEelDatagram
           - PostFlightUsageDataDtg
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  description:
                    The attachment file ({messageId}.zip) shall contain all application
                    data files with their original file names referenced by the payload.
                  type: string
                  format: binary

                attachmentReference:
                  description:
                    When the attachment of the message is too large to be transferred as an embedded attachment,
                    the attachment must be stored/transferred as a split Zip file that have multiple parts.
                    Each part of the split Zip file has a different extension
                    ({messageId}.z01, {messageId}.z02, etc., and {messageId}.zip for the last part).
                    All parts of a split zip file must be uploaded one at a time before posting the message.
                  type: object
                  properties:
                    splitFiles:
                      type: array
                      items:
                        type: object
                        properties:
                          fileName:
                            type: string
                            example:
                            - 18bfae15-90a5-11eb-8a32-00155d0b0200.z01
                            - 18bfae15-90a5-11eb-8a32-00155d0b0200.z02
                            - 18bfae15-90a5-11eb-8a32-00155d0b0200.zip
                          fileChecksum:
                            $ref: "#/components/schemas/Checksum"                      
                        required:
                        - filename
                        - fileChecksum
                  required:
                    - splitFiles
                payload:
                  type: string
                  format: xml

                metaData:
                  $ref: "#/components/schemas/MetaData"

              required:
                - metaData

  #
  # Endpoint for posting a split zip file part
  #
  /splitfiles/{fileName}:
    post:
      summary:
       To upload the specified split zip file part of a message attachment where
       the attachment is too big to be embedded with the message.
       All split files of the attachment must be uploaded before
       sending the associated message.

      responses:
        "200":
          description: OK
        "408":
          description: Request Timeout
      parameters:
        - in: path
          name: fileName
          required: true
          schema:
            type: string
            example:
              - 18bfae15-90a5-11eb-8a32-00155d0b0200.z01
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                messageId:           
                  type: string
                  format: uuid
                  example:
                  - 18bfae15-90a5-11eb-8a32-00155d0b0200
                destSystem:           
                  type: string
                  example:
                  - LDM
                splitFile:
                  # a binary file 
                  type: string
                  format: binary
                splitFileChecksum:
                  $ref: "#/components/schemas/Checksum"                      

components:
  schemas:
    MetaData:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          example:
            - 18bfae15-90a5-11eb-8a32-00155d0b0200
        messageName:
          type: string
          example:
            - postJtdDatagram
        messageVersion:
          type: string
        correlationMessageID:
          type: string
          format: uuid
          example:
            - 18bfae15-90a5-11eb-8a32-00155d0b0201
        originationSystem:
          type: string
          description: F-35 Enterprise and ODIN systems (LDM, GSSM, SPMS, PW, ODIN-SDD, and ODIN-LRIP)
          example:
            - LDM
            - SPMS
            - GSSM
            - PW
            - ODIN-SDD
            - ODIN-LRIP

        originationOdinKit:
          type: string
          description: set by ODIN only (A2UN, CUS01UN, S001UNUS01, and etc.)
          example:
            - A2UN
            - S001UNUS01
            - CUS01

        createdTime:
          type: string
          format: date-time
          description: time set by the message producer application (i.e ODIN-CMMS, LDM )

        sendTime:
          type: string
          format: date-time
          description: time set by the message sending application (i.e ODIN SSB Gateway, SSB)
        destinationSystem:
          type: string
          description: F-35 Enterprise system  and ODIN system (LDM, GSSM, SPMS, PW, ODIN-SDD, and ODIN-LRIP)
          example:
            - LDM
            - SPMS
            - GSSM
            - PW
            - ODIN-SDD
            - ODIN-LRIP

        destinationOdinKit:
          type: string
          description: set by F-35 Enterprise system for messages to ODIN if required by applicable message type
          example:
            - A2UN
            - S001UNUS01
            - CUS01

        destinationRetailSiteId:
          type: string
          description: set by F-35 Enterprise system for messages to ODIN if required by the applicable message type
          example:
            - KEDW

        attachmentChecksum:
          $ref: "#/components/schemas/Checksum"

      required:
        - messageId
        - messageName
        - originationSystem
        - destinationSystem
        - sendTime
        - createdTime
    Checksum:
      type: object
      properties:
        hashValue:
          type: string
        hashAlgorithm:
          type: string
          description: Hash algorithm names as defined in https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#messagedigest-algorithms or FIPS PUB 180-4 and FIPS PUB 202
          example:
            - SHA-1
            - SHA-224
            - SHA-256
            - SHA-384
            - SHA-512/224
            - SHA-512/256
            - SHA3-224
            - SHA3-256
            - SHA3-384
            - SHA3-512